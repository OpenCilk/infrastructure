#!/bin/sh

# Source directory for OpenCilk (root of the opencilk-project repository tree).
# Must be an absolute pathname.
case "$1" in
    /*) OPENCILK_SOURCE="$1";;
    -h|-help|--help) echo "USAGE: build source-dir build-dir [core-count]"; exit 1;;
    -*) echo "unknown option $1"; exit 1;;
    *) echo "First argument ($1) must be absolute pathname"; exit 1;;
esac

# Build directory for OpenCilk.  Must be an absolute pathname.  The Cheetah
# runtime has to be built in its source directory, which should be a
# sub-directory named "cheetah" within the OpenCilk source directory.
# Similarly, the OpenCilk productivity tools source should be in a sub-directory
# named "cilktools" within the OpenCilk source directory.  The OpenCilk compiler
# will not be installed anywhere; run it out of ${BUILD_DIR}/bin.
case "$2" in
    /*) BUILD_DIR="$2";;
    *) echo "Second argument ($2) must be absolute pathname"; exit 1;;
esac

NCPU="${3}"
if test -z "${NCPU}" -a -r /proc/cpuinfo ; then
    NCPU=$(grep -c '^processor' /proc/cpuinfo 2> /dev/null)
fi
if test -z "${NCPU}" ; then
    if test -x /sbin/sysctl -o -x /usr/sbin/sysctl ; then
    NCPU=$(PATH=${PATH}:/sbin:/usr/sbin sysctl -n hw.ncpu)
    fi
fi
if test -z "${NCPU}" -o 0 -eq "${NCPU}" ; then
    echo "Unknown CPU count; using 10"
    NCPU=10
fi

if ! test -d "${OPENCILK_SOURCE}" ; then
    echo "OpenCilk source tree ${OPENCILK_SOURCE} does not exist" 1>&2
    exit 1
fi

CHEETAH_SOURCE="${OPENCILK_SOURCE:?}/cheetah"
CILKTOOLS_SOURCE="${OPENCILK_SOURCE:?}/cilktools"

exec < /dev/null

date # Who doesn't love timestamps?

echo "Building with ${NCPU:?} parallel jobs"

OS="$(uname -s)"

# LLVM works with any make.  Cheetah currently requires GNU make.
#case "${OS}" in
#    Linux|Darwin) GMAKE=make; ;;
#    *) GMAKE=gmake ;;
#esac

if ! test -d "${OPENCILK_SOURCE}/llvm" ; then
    echo "LLVM not found at ${OPENCILK_SOURCE}/llvm" 1>&2
    exit 1
fi
if ! test -d "${CHEETAH_SOURCE}/runtime" ; then
    echo "Cheetah runtime source not found at ${CHEETAH_SOURCE}/runtime" 1>&2
    exit 1
fi
if ! test -d "${CILKTOOLS_SOURCE}" ; then
    echo "OpenCilk productivity tools source not found at ${CILKTOOLS_SOURCE}" 1>&2
    exit 1
fi

set -ex

mkdir -p "${BUILD_DIR}"

cd "${BUILD_DIR}"

: "${OPENCILK_RELEASE:=Release}" # RelWithDebInfo to debug the compiler
: "${OPENCILK_ASSERTIONS:=On}"   # Off to disable assertions in the compiler
COMPONENTS="clang;compiler-rt"   # Required components; edit to add extra LLVM projects
case "${OS}" in
    Darwin)
        : "${LIBCXX:="libcxx;"}" ;;
esac
RUNTIMES="${LIBCXX}cheetah;cilktools" # Required runtimes

cmake -DLLVM_ENABLE_PROJECTS="${COMPONENTS}" \
      -DLLVM_ENABLE_RUNTIMES="${RUNTIMES}" \
      -DLLVM_ENABLE_ASSERTIONS="${OPENCILK_ASSERTIONS:?}" \
      -DCMAKE_BUILD_TYPE="${OPENCILK_RELEASE:?}" \
      "${OPENCILK_SOURCE}/llvm"
# Alternatively, make -j "${NCPU}" using the native system make.
# cmake 3.10 neeeds -- before -j.  cmake 3.16 understands -j
cmake --build . -- -j "${NCPU}"
# TODO: cmake --install ...

TRIPLE=$("${BUILD_DIR}/bin/clang" -print-target-triple)
VERSION=$(sed -n '/set.PACKAGE_VERSION/s/^.* \([0-9.]*\))/\1/p' "${CHEETAH_SOURCE}/CMakeLists.txt")

LIBPATH="${BUILD_DIR}/lib/clang/${VERSION}/lib/${TRIPLE}/libopencilk.a"

# Cheetah should have been built as part of LLVM
if ! test -f "${LIBPATH}" ; then
    echo "Cheetah runtime library not found at ${LIBPATH}"
    exit 1
fi

date
